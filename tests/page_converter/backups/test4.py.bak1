#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    May 27, 2025 11:12:00 AM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import test4_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

class MyClassName:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+612+209")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("my_title")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.033, rely=0.133, height=21, width=84)
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 9")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="#000000")
        self.Label2.configure(text='''Fahrenheit''')

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.033, rely=0.067, height=21, width=64)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 9")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="#000000")
        self.Label1.configure(text='''Celsius''')

        self.bt_example = tk.Button(self.top)
        self.bt_example.place(relx=0.067, rely=0.444, height=36, width=167)
        self.bt_example.configure(activebackground="#d9d9d9")
        self.bt_example.configure(activeforeground="black")
        self.bt_example.configure(background="#d9d9d9")
        self.bt_example.configure(disabledforeground="#a3a3a3")
        self.bt_example.configure(font="-family {Segoe UI} -size 9")
        self.bt_example.configure(foreground="#000000")
        self.bt_example.configure(highlightbackground="#d9d9d9")
        self.bt_example.configure(highlightcolor="#000000")
        self.bt_example.configure(text='''Demonstrate''')
        self.bt_example.bind('<ButtonRelease-1>',lambda e:test4_support.on_click_example(e, self))

        self.bt_clear = tk.Button(self.top)
        self.bt_clear.place(relx=0.067, rely=0.289, height=36, width=177)
        self.bt_clear.configure(activebackground="#d9d9d9")
        self.bt_clear.configure(activeforeground="black")
        self.bt_clear.configure(background="#d9d9d9")
        self.bt_clear.configure(disabledforeground="#a3a3a3")
        self.bt_clear.configure(font="-family {Segoe UI} -size 9")
        self.bt_clear.configure(foreground="#000000")
        self.bt_clear.configure(highlightbackground="#d9d9d9")
        self.bt_clear.configure(highlightcolor="#000000")
        self.bt_clear.configure(text='''Clear''')
        self.bt_clear.bind('<ButtonRelease-1>',lambda e:test4_support.on_click_clear(e, self))

        self.ed_cel = tk.Entry(self.top)
        self.ed_cel.place(relx=0.2, rely=0.022, height=40, relwidth=0.29)
        self.ed_cel.configure(background="white")
        self.ed_cel.configure(disabledforeground="#a3a3a3")
        self.ed_cel.configure(font="-family {Courier New} -size 10")
        self.ed_cel.configure(foreground="#000000")
        self.ed_cel.configure(highlightbackground="#d9d9d9")
        self.ed_cel.configure(highlightcolor="#000000")
        self.ed_cel.configure(insertbackground="#000000")
        self.ed_cel.configure(selectbackground="#d9d9d9")
        self.ed_cel.configure(selectforeground="black")
        self.ed_cel_tooltip = \
        ToolTip(self.ed_cel, '''Enter temperature in Celsius here.''')
        self.ed_cel.bind('<KeyRelease>',lambda e:test4_support.on_key_cel(e, self))

        self.ed_fah = tk.Text(self.top)
        self.ed_fah.place(relx=0.2, rely=0.133, relheight=0.098, relwidth=0.29)
        self.ed_fah.configure(background="white")
        self.ed_fah.configure(font="TkTextFont")
        self.ed_fah.configure(foreground="black")
        self.ed_fah.configure(highlightbackground="#d9d9d9")
        self.ed_fah.configure(highlightcolor="#000000")
        self.ed_fah.configure(insertbackground="#000000")
        self.ed_fah.configure(selectbackground="#d9d9d9")
        self.ed_fah.configure(selectforeground="black")
        self.ed_fah.configure(wrap="word")
        self.ed_fah_tooltip = \
        ToolTip(self.ed_fah, '''Enter temperature in Fahrenheit here.''')
        self.ed_fah.bind('<KeyRelease>',lambda e:test4_support.on_key_fah(e, self))

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

def start_up():
    test4_support.main()

if __name__ == '__main__':
    test4_support.main()





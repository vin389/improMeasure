#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jun 02, 2025 01:38:59 PM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from datetime import datetime

import mss0p

_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = mss0p.Mss0p(_top1)
    root.mainloop()

def on_click_work_dir(e, self):
    # to prevent file dialog from blocking the mainloop, we delay opening the file dialog. 
    root.after(10, lambda: on_click_work_dir_(e, self))

def on_click_work_dir_(*args):
    # This function is called when the "Work Directory" button is clicked.
    # It opens a file dialog to select a directory.
    # If user selects a directory, it updates the Entry widget (args[1].tx_work_dir)
    # pops up a message box with the selected directory.
    if _debug:
        print('mss0p_support.on_click_bt_work_dir')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    if len(args) < 2:
        print("# Error: on_click_bt_work_dir requires an Entry widget as the second argument.")
        return
    entry_widget = args[1].tx_work_dir  
    # Open a file dialog to select a directory
    from tkinter import filedialog
    selected_dir = filedialog.askdirectory(title="Select Work Directory")
    if selected_dir:
        # Update the Entry widget with the selected directory
        entry_widget.delete(0, tk.END)  # Clear the current text
        entry_widget.insert(0, selected_dir)  # Insert the new directory path
        # Optionally, you can also print or log the selected directory
        print(f"Selected work directory: {selected_dir}")
    else:
        print("No directory selected.")
    # trigger on_key_work_dir to check if the directory exists
    on_key_work_dir(*args)  # Call the function to check if the directory exists
    # end of on_click_bt_work_dir()


def on_key_work_dir(*args):
    # This function is called when a key is pressed in the "Work Directory" Entry widget.
    # Get work_dir from the Entry widget (args[1].tx_work_dir)
    if _debug:
        print('mss0p_support.on_key_work_dir')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    if len(args) < 2:
        print("# Error: on_key_work_dir requires an Entry widget as the second argument.")
        return
    entry_widget = args[1].tx_work_dir
    work_dir = entry_widget.get()  # Get the current text from the Entry widget
    # check if the directory work_dir exists
    # if it does it does exist, set the text color to blue
    # otherwise, set the text color to red
    import os
    if os.path.isdir(work_dir):
        entry_widget.config(fg='blue')  # Set text color to blue
    else:
        entry_widget.config(fg='red')  # Set text color to red 
    # end of on_key_work_dir()

def on_click_clear_output(*args):
    # This function is called when the "Clear Output" button is clicked.
    # It clears the text in the output Text widget (args[1].tx_output).
    if _debug:
        print('mss0p_support.on_click_clear_output')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    if len(args) < 2:
        print("# Error: on_click_clear_output requires a Text widget as the second argument.")
        return
    # Clear the text in the Text widget
    text_widget = args[1].tx_output
    text_widget.delete(1.0, tk.END)  # Clear all text in the Text widget
    # end of on_click_clear_output()

def on_click_load(e, self):
    from mss0p_load_project_file import load_project_file 
    # This function is called when the "Load" button is clicked.
    [basic_info, camera_parameters, pois_definition, image_sources]= \
        load_project_file(project_file_path=None, print_widget=self.tx_output)  
    # If the project file is loaded successfully, it updates the attributes of the self object.
    # If user cancels the file dialog, returns will be None for all variables.
    if not basic_info is None:
       self.basic_info = basic_info
    if not camera_parameters is None:
       self.camera_parameters = camera_parameters
    if not pois_definition is None:
       self.pois_definition = pois_definition
    if not image_sources is None:
       self.image_sources = image_sources
    # end of on_click_load()

def on_click_save(e, self):
    from mss0p_save_project_file import save_project_file 
    # This function is called when the "Save" button is clicked.
    basic_info = self.basic_info if hasattr(self, 'basic_info') else None
    camera_parameters = self.camera_parameters if hasattr(self, 'camera_parameters') else None
    pois_definition = self.pois_definition if hasattr(self, 'pois_definition') else None
    image_sources = self.image_sources if hasattr(self, 'image_sources') else None
    saved_project_file_path = save_project_file(basic_info=basic_info,
                                                camera_parameters=camera_parameters, 
                                                pois_definition=pois_definition,
                                                image_sources=image_sources,
                                                project_file_path=None,
                                                print_widget=self.tx_output)
    # If the project file is saved successfully, it updates the attributes of the self object.
    if not saved_project_file_path is None:
        self.project_file_path = saved_project_file_path
        self.tx_output.insert("end", f"# {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.\n")
        self.tx_output.insert(tk.END, f"Project file saved to: {saved_project_file_path}\n")
    else:
        self.tx_output.insert(tk.END, "Project file not saved.\n")
    # end of on_click_save()
    return 

def on_click_print_info(e, self):
    # This function is called when the "Print Info" button is clicked.
    # It prints the basic information of the project to the Text widget.
    if _debug:
        print('mss0p_support.on_click_print_info')
        print ('    e:', e)
        print ('    self:', self)
        sys.stdout.flush()
    if not hasattr(self, 'tx_output'):
        print("# Error: on_click_print_info requires a Text widget named tx_output.")
        return
    # Get the current values from the Entry widgets
    work_dir = self.tx_work_dir.get()
    output_text = f"Work Directory: {work_dir}\n"
    # Print the output text to the Text widget
    self.tx_output.insert(tk.END, output_text)  # Append text to the Text widget
    # end of on_click_print_info()

def on_click_select_video_sources(e, self):
    pass

def on_click_pick_pois(e, self):
    pass

def on_click_detect_aruco_pois(e, self):
    pass

def on_click_show_pois(e, self):
    pass

def on_click_track_pois(e, self):
    pass






if __name__ == '__main__':
    mss0p.start_up()




